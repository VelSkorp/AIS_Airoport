<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:local="clr-namespace:AIS_Airport"
					xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2">

	<Style TargetType="{x:Type TextBlock}" x:Key="HeaderText" BasedOn="{StaticResource BaseTextBlockStyle}">
		<Setter Property="Foreground" Value="{StaticResource ForegroundMainBrush}" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="Margin" Value="0 6" />
	</Style>

	<Style TargetType="{x:Type TextBlock}" x:Key="RegularText" BasedOn="{StaticResource BaseTextBlockStyle}">

		<Setter Property="FontSize" Value="{StaticResource FontSizeLarge}" />
		<Setter Property="FontFamily" Value="{StaticResource LatoRegular}" />
		<Setter Property="Padding" Value="10" />
		<Setter Property="Margin" Value="0 5 0 5" />
		<Setter Property="VerticalAlignment" Value="Center" />

		<Setter Property="Background" Value="{StaticResource WordTransparentBlueBrush}" />
		<Setter Property="Foreground" Value="{StaticResource ForegroundVeryDarkBrush}" />
	</Style>

	<Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource BaseStyle}">

		<Setter Property="FontSize" Value="{StaticResource FontSizeXXLarge}" />
		<Setter Property="FontFamily" Value="{StaticResource LatoRegular}" />
		<Setter Property="Padding" Value="10" />
		<Setter Property="Margin" Value="5" />
		<Setter Property="MinWidth" Value="120" />
		<Setter Property="BorderBrush" Value="{StaticResource WordBlueBrush}" />
		<Setter Property="BorderThickness" Value="0 0 0 1" />

		<Setter Property="Background" Value="{StaticResource ForegroundLightBrush}" />
		<Setter Property="Foreground" Value="{StaticResource ForegroundVeryDarkBrush}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBoxBase}">
					<Grid>
						<Border x:Name="border" 
								BorderBrush="{TemplateBinding BorderBrush}" 
								BorderThickness="{TemplateBinding BorderThickness}"
								Background="{TemplateBinding Background}"
								HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
								SnapsToDevicePixels="True">
							<ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
						</Border>

						<TextBlock IsHitTestVisible="False"
								   Text="{TemplateBinding Tag}"
								   x:Name="placeholder"
								   FontFamily="{StaticResource LatoThin}"
								   Padding="{TemplateBinding Padding}"
								   VerticalAlignment="Center"
								   HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
								   Foreground="{StaticResource ForegroundVeryDarkBrush}" >
							<TextBlock.Style>
								<Style TargetType="{x:Type TextBlock}">
									<Setter Property="Visibility" Value="Collapsed" />
									<Style.Triggers>
										<DataTrigger Binding="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" Value="">
											<Setter Property="Visibility" Value="Visible" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</TextBlock.Style>
						</TextBlock>

					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" TargetName="border" Value="0.56"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="BorderBrush" TargetName="border" Value="#FF7EB4EA"/>
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="True">
							<Setter Property="BorderBrush" TargetName="border" Value="#FF569DE5"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

	</Style>

	<Style TargetType="{x:Type TextBox}" x:Key="NotEmptyNumberValidation" BasedOn="{StaticResource {x:Type TextBox}}">

		<Setter Property="local:TextValidationProperty.Value">
			<Setter.Value>
				<Binding Path="Text" RelativeSource="{RelativeSource Self}"  UpdateSourceTrigger="PropertyChanged">
					<Binding.ValidationRules>
						<local:NotNullOrEmptyValidationRule ValidatesOnTargetUpdated="True" />
						<local:RegexValidationRule RegexPattern="^[0-9]*$" ErrorMessage="Only numbers are allowed." ValidatesOnTargetUpdated="True" />
					</Binding.ValidationRules>
				</Binding>
			</Setter.Value>
		</Setter>

	</Style>

	<Style TargetType="{x:Type TextBox}" x:Key="NotEmptyCoordinateValidation" BasedOn="{StaticResource {x:Type TextBox}}">

		<Setter Property="local:TextValidationProperty.Value">
			<Setter.Value>
				<Binding Path="Text" RelativeSource="{RelativeSource Self}"  UpdateSourceTrigger="PropertyChanged">
					<Binding.ValidationRules>
						<local:NotNullOrEmptyValidationRule ValidatesOnTargetUpdated="True" />
						<local:RegexValidationRule RegexPattern="^-?([1-8]?[1-9]|[1-9]0)\.{1}\d{1,6},\s*-?((1[0-7]|[1-9])?\d(\.\d{1,6})?|180(\.0{1,6})?)$" ErrorMessage="Invalid coordinate format (e.g. 55.7558, 37.6176.)." ValidatesOnTargetUpdated="True" />
					</Binding.ValidationRules>
				</Binding>
			</Setter.Value>
		</Setter>

	</Style>

	<Style TargetType="{x:Type TextBox}" x:Key="NotEmptyFlightNumberValidation" BasedOn="{StaticResource {x:Type TextBox}}">

		<Setter Property="local:TextValidationProperty.Value">
			<Setter.Value>
				<Binding Path="Text" RelativeSource="{RelativeSource Self}"  UpdateSourceTrigger="PropertyChanged">
					<Binding.ValidationRules>
						<local:NotNullOrEmptyValidationRule ValidatesOnTargetUpdated="True" />
						<local:RegexValidationRule RegexPattern="^[A-Za-z0-9]{2,3}\d{2,3}$" ErrorMessage="Invalid flight number format." ValidatesOnTargetUpdated="True" />
					</Binding.ValidationRules>
				</Binding>
			</Setter.Value>
		</Setter>

	</Style>

	<Style TargetType="{x:Type TextBox}" x:Key="NotEmptyAirplaneBoardNumberValidation" BasedOn="{StaticResource {x:Type TextBox}}">

		<Setter Property="local:TextValidationProperty.Value">
			<Setter.Value>
				<Binding Path="Text" RelativeSource="{RelativeSource Self}"  UpdateSourceTrigger="PropertyChanged">
					<Binding.ValidationRules>
						<local:NotNullOrEmptyValidationRule ValidatesOnTargetUpdated="True" />
						<local:RegexValidationRule RegexPattern="^[A-Z]{2,4}\d{2,4}$" ErrorMessage="Invalid airplane board number format(e.g. AB1234)." ValidatesOnTargetUpdated="True" />
					</Binding.ValidationRules>
				</Binding>
			</Setter.Value>
		</Setter>

	</Style>

	<Style TargetType="{x:Type TextBox}" x:Key="NotEmptyAirplaneModelValidation" BasedOn="{StaticResource {x:Type TextBox}}">

		<Setter Property="local:TextValidationProperty.Value">
			<Setter.Value>
				<Binding Path="Text" RelativeSource="{RelativeSource Self}"  UpdateSourceTrigger="PropertyChanged">
					<Binding.ValidationRules>
						<local:NotNullOrEmptyValidationRule ValidatesOnTargetUpdated="True" />
						<local:RegexValidationRule RegexPattern="^[A-Za-z0-9\- ]{1,20}$" ErrorMessage="Invalid airplane model format(e.g. 'Boeing 737', 'A320')." ValidatesOnTargetUpdated="True" />
					</Binding.ValidationRules>
				</Binding>
			</Setter.Value>
		</Setter>

	</Style>
	
	<Style TargetType="{x:Type TextBox}" x:Key="NotEmptyPassportValidation" BasedOn="{StaticResource {x:Type TextBox}}">

		<Setter Property="local:TextValidationProperty.Value">
			<Setter.Value>
				<Binding Path="Text" RelativeSource="{RelativeSource Self}"  UpdateSourceTrigger="PropertyChanged">
					<Binding.ValidationRules>
						<local:NotNullOrEmptyValidationRule ValidatesOnTargetUpdated="True" />
						<local:RegexValidationRule RegexPattern="^[A-Za-z0-9]{5,9}$" ErrorMessage="Invalid passport number format(e.g. AB12345)." ValidatesOnTargetUpdated="True" />
					</Binding.ValidationRules>
				</Binding>
			</Setter.Value>
		</Setter>

	</Style>
	
	<Style TargetType="{x:Type TextBox}" x:Key="NotEmptyPhoneValidation" BasedOn="{StaticResource {x:Type TextBox}}">

		<Setter Property="local:TextValidationProperty.Value">
			<Setter.Value>
				<Binding Path="Text" RelativeSource="{RelativeSource Self}"  UpdateSourceTrigger="PropertyChanged">
					<Binding.ValidationRules>
						<local:NotNullOrEmptyValidationRule ValidatesOnTargetUpdated="True" />
						<local:RegexValidationRule RegexPattern="^\(\+?\d{2,3}\)?[-.\s]?\(?\d{3}\)?[-\s]?\d{3}[-.\s]?\d{3,4}$" ErrorMessage="Invalid phone number format." ValidatesOnTargetUpdated="True" />
					</Binding.ValidationRules>
				</Binding>
			</Setter.Value>
		</Setter>

	</Style>

	<Style TargetType="{x:Type TextBox}" x:Key="NotEmptyTicketValidation" BasedOn="{StaticResource {x:Type TextBox}}">

		<Setter Property="local:TextValidationProperty.Value">
			<Setter.Value>
				<Binding Path="Text" RelativeSource="{RelativeSource Self}"  UpdateSourceTrigger="PropertyChanged">
					<Binding.ValidationRules>
						<local:NotNullOrEmptyValidationRule ValidatesOnTargetUpdated="True" />
						<local:RegexValidationRule RegexPattern="^[A-Za-z0-9]{3,10}$" ErrorMessage="Invalid Ticket number format(e.g. XYZ5678)." ValidatesOnTargetUpdated="True" />
					</Binding.ValidationRules>
				</Binding>
			</Setter.Value>
		</Setter>

	</Style>

	<Style TargetType="{x:Type TextBox}" x:Key="NotEmptyTimeValidation" BasedOn="{StaticResource {x:Type TextBox}}">

		<Setter Property="local:TextValidationProperty.Value">
			<Setter.Value>
				<Binding Path="Text" RelativeSource="{RelativeSource Self}"  UpdateSourceTrigger="PropertyChanged">
					<Binding.ValidationRules>
						<local:NotNullOrEmptyValidationRule ValidatesOnTargetUpdated="True" />
						<local:RegexValidationRule RegexPattern="^([01]?[0-9]|2[0-3]):[0-5][0-9]$" ErrorMessage="Invalid time format(24h)." ValidatesOnTargetUpdated="True" />
					</Binding.ValidationRules>
				</Binding>
			</Setter.Value>
		</Setter>

	</Style>

	<Style TargetType="{x:Type TextBox}" x:Key="NotEmptyValidation" BasedOn="{StaticResource {x:Type TextBox}}">

		<Setter Property="local:TextValidationProperty.Value">
			<Setter.Value>
				<Binding Path="Text" RelativeSource="{RelativeSource Self}"  UpdateSourceTrigger="PropertyChanged">
					<Binding.ValidationRules>
						<local:NotNullOrEmptyValidationRule ValidatesOnTargetUpdated="True" />
					</Binding.ValidationRules>
				</Binding>
			</Setter.Value>
		</Setter>

	</Style>

	<Style TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource BaseStyle}">

		<Setter Property="FontSize" Value="{StaticResource FontSizeXXLarge}" />
		<Setter Property="FontFamily" Value="{StaticResource LatoRegular}" />
		<Setter Property="Padding" Value="10" />
		<Setter Property="Margin" Value="5" />
		<Setter Property="BorderBrush" Value="{StaticResource WordBlueBrush}" />
		<Setter Property="BorderThickness" Value="0 0 0 1" />

		<Setter Property="Background" Value="{StaticResource ForegroundLightBrush}" />
		<Setter Property="Foreground" Value="{StaticResource ForegroundVeryDarkBrush}" />

		<Setter Property="local:MonitorPasswordProperty.Value" Value="True" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type PasswordBox}">

					<Grid>

						<Border x:Name="border" 
								BorderBrush="{TemplateBinding BorderBrush}" 
								BorderThickness="{TemplateBinding BorderThickness}"
								Background="{TemplateBinding Background}"
								SnapsToDevicePixels="True">
							<ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
						</Border>

						<TextBlock IsHitTestVisible="False"
								   Text="{TemplateBinding Tag}"
								   x:Name="placeholder"
								   FontFamily="{StaticResource LatoThin}"
								   FontSize="{TemplateBinding FontSize}"
								   Padding="{TemplateBinding Padding}"
								   Visibility="{TemplateBinding local:HasTextProperty.Value, Converter={local:BooleanToVisibilityConverter}}"
								   VerticalAlignment="Center"
								   HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
								   Foreground="{StaticResource ForegroundVeryDarkBrush}" />

					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" TargetName="border" Value="0.56"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="BorderBrush" TargetName="border" Value="#FF7EB4EA"/>
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="True">
							<Setter Property="BorderBrush" TargetName="border" Value="#FF569DE5"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<Setter Property="local:TextValidationProperty.Value">
			<Setter.Value>
				<Binding Path="SecurePassword.Length" RelativeSource="{RelativeSource Self}"  UpdateSourceTrigger="PropertyChanged">
					<Binding.ValidationRules>
						<local:RegexValidationRule RegexPattern="^[1-9]\d*$" ErrorMessage="Field can't be empty" ValidatesOnTargetUpdated="True" />
					</Binding.ValidationRules>
				</Binding>
			</Setter.Value>
		</Setter>

	</Style>

	<Style TargetType="{x:Type TextBlock}" x:Key="SpinningText" BasedOn="{StaticResource BaseTextBlockStyle}">

		<Setter Property="FontFamily" Value="{StaticResource FontAwesome}" />
		<Setter Property="Text" Value="&#xf110;" />
		<Setter Property="RenderTransformOrigin" Value="0.5, 0.5" />
		<Setter Property="RenderTransform">
			<Setter.Value>
				<RotateTransform />
			</Setter.Value>
		</Setter>

		<Style.Resources>
			<Storyboard x:Key="Spin">
				<DoubleAnimation
					Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
					From="0"
					To="360"
					Duration="0:0:2"
					RepeatBehavior="Forever" />
			</Storyboard>
		</Style.Resources>

		<Style.Triggers>
			<DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=IsVisible}" Value="True">
				<DataTrigger.EnterActions>
					<BeginStoryboard Name="SpinStoryboard" Storyboard="{StaticResource Spin}" />
				</DataTrigger.EnterActions>
				<DataTrigger.ExitActions>
					<RemoveStoryboard BeginStoryboardName="SpinStoryboard" />
				</DataTrigger.ExitActions>
			</DataTrigger>
		</Style.Triggers>

	</Style>

	<Style TargetType="{x:Type DatePicker}" BasedOn="{StaticResource BaseStyle}">
		<Setter Property="FontSize" Value="{StaticResource FontSizeLarge}" />
		<Setter Property="FontFamily" Value="{StaticResource LatoRegular}" />

		<Setter Property="Background" Value="{StaticResource WordTransparentBlueBrush}" />
		<Setter Property="Foreground" Value="{StaticResource ForegroundVeryDarkBrush}" />

		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>

		<Setter Property="local:TextValidationProperty.Value">
			<Setter.Value>
				<Binding Path="SelectedDate" RelativeSource="{RelativeSource Self}"  UpdateSourceTrigger="PropertyChanged">
					<Binding.ValidationRules>
						<local:NotNullOrEmptyValidationRule ValidatesOnTargetUpdated="True" />
					</Binding.ValidationRules>
				</Binding>
			</Setter.Value>
		</Setter>

		<Setter Property="Validation.ErrorTemplate">
			<Setter.Value>
				<ControlTemplate>
					<StackPanel>
						<Border BorderBrush="Red" BorderThickness="1" Margin="0 0 40 0" Height="35">
							<AdornedElementPlaceholder Margin="-3 -15 -30 0" />
						</Border>
						<TextBlock Text="{Binding [0].ErrorContent}" FontSize="{StaticResource FontSizeSmaller}" Foreground="Red"/>
					</StackPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

	</Style>

	<Style TargetType="{x:Type DatePickerTextBox}">
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
		<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="Padding" Value="2" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DatePickerTextBox}">
					<Grid>
						<Grid.Resources>
							<SolidColorBrush x:Key="WatermarkBrush" Color="#FFAAAAAA"/>
						</Grid.Resources>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0"/>
									<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<ColorAnimation Duration="0" To="#FF99C1E2" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="ContentElement"/>
										<ColorAnimation Duration="0" To="#FF99C1E2" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="watermark_decorator"/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="WatermarkStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Unwatermarked"/>
								<VisualState x:Name="Watermarked">
									<Storyboard>
										<DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ContentElement"/>
										<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Watermark"/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="FocusStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Unfocused"/>
								<VisualState x:Name="Focused">
									<Storyboard>
										<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FocusVisual"/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="Border"
								CornerRadius="5"
								Opacity="1"
								Padding="{TemplateBinding Padding}">

							<Grid x:Name="WatermarkContent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">

								<Border x:Name="ContentElement"
										BorderBrush="{StaticResource WordBlueBrush}"
										BorderThickness="0 0 0 1"/>

								<Border x:Name="watermark_decorator"
										BorderBrush="{StaticResource WordBlueBrush}" 
										BorderThickness="0 0 0 1">

									<ContentControl x:Name="PART_Watermark" 
													Focusable="False"
													IsHitTestVisible="False" 
													Opacity="0">

										<ContentControl.Template>
											<ControlTemplate>
												<TextBlock Text="Pick date" 
														   FontSize="{StaticResource FontSizeLarge}"
														   FontFamily="{StaticResource LatoRegular}" />
											</ControlTemplate>
										</ContentControl.Template>

									</ContentControl>

								</Border>
								<ScrollViewer x:Name="PART_ContentHost" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
								<Border x:Name="FocusVisual" BorderBrush="#FF45D6FA" CornerRadius="1" IsHitTestVisible="False" Opacity="0"/>
							</Grid>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<LinearGradientBrush x:Key="ComboBox.Static.Background" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#FFF0F0F0" Offset="0.0"/>
		<GradientStop Color="#FFE5E5E5" Offset="1.0"/>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="ComboBox.Static.Border" Color="#FFACACAC"/>
	<SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="#FFFFFFFF"/>
	<SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#FFABADB3"/>
	<SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
	<SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
	<SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#FF000000"/>
	<LinearGradientBrush x:Key="ComboBox.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#FFECF4FC" Offset="0.0"/>
		<GradientStop Color="#FFDCECFC" Offset="1.0"/>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#FF7EB4EA"/>
	<SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="#FFFFFFFF"/>
	<SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#FF7EB4EA"/>
	<LinearGradientBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#FFEBF4FC" Offset="0.0"/>
		<GradientStop Color="#FFDCECFC" Offset="1.0"/>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#FF7EB4EA"/>
	<SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#FF000000"/>
	<LinearGradientBrush x:Key="ComboBox.Pressed.Background" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#FFDAECFC" Offset="0.0"/>
		<GradientStop Color="#FFC4E0FC" Offset="1.0"/>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#FF569DE5"/>
	<SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#FFFFFFFF"/>
	<SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#FF569DE5"/>
	<LinearGradientBrush x:Key="ComboBox.Pressed.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#FFDAEBFC" Offset="0.0"/>
		<GradientStop Color="#FFC4E0FC" Offset="1.0"/>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#FF569DE5"/>
	<SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF"/>
	<SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#FFF0F0F0"/>
	<SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9"/>
	<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF"/>
	<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF"/>
	<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
	<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
	<SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060"/>
	
	<Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="ClickMode" Value="Press"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="templateRoot" SnapsToDevicePixels="true" Background="{StaticResource ComboBox.Static.Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{StaticResource ComboBox.Static.Border}">
						<Border x:Name="splitBorder" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" SnapsToDevicePixels="true" Margin="0" HorizontalAlignment="Right" BorderThickness="1" BorderBrush="Transparent">
							<Path x:Name="arrow" VerticalAlignment="Center" Margin="0" HorizontalAlignment="Center" Fill="{StaticResource ComboBox.Static.Glyph}" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"/>
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
							<Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
							<Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>
						</MultiDataTrigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
							<Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
							<Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>
						</MultiDataTrigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
							<Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}"/>
							<Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}"/>
						</MultiDataTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}"/>
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Border}"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
							<Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}"/>
							<Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}"/>
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<SolidColorBrush x:Key="TextBox.Static.Background" Color="#FFFFFFFF"/>

	<ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
			</Grid.ColumnDefinitions>
			<Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
					<Border x:Name="dropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
						<ScrollViewer x:Name="DropDownScrollViewer">
							<Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
								<Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
									<Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
								</Canvas>
								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							</Grid>
						</ScrollViewer>
					</Border>
				</Themes:SystemDropShadowChrome>
			</Popup>
			
			<ToggleButton x:Name="toggleButton"
						  BorderBrush="{TemplateBinding BorderBrush}"
						  BorderThickness="{TemplateBinding BorderThickness}"
						  Background="{TemplateBinding Background}"
						  Grid.ColumnSpan="2"
						  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
						  Style="{StaticResource ComboBoxToggleButton}"/>
			
			<Border x:Name="border"
					Background="{StaticResource TextBox.Static.Background}" 
					Margin="{TemplateBinding BorderThickness}">
				
				<TextBox x:Name="PART_EditableTextBox"
						 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
						 IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
						 Margin="{TemplateBinding Padding}"
						 BorderThickness="0"
						 FontFamily="{StaticResource LatoRegular}"
						 FontSize="{StaticResource FontSizeLarge}"
						 VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
			
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" TargetName="border" Value="0.56"/>
			</Trigger>
			<Trigger Property="IsKeyboardFocusWithin" Value="true">
				<Setter Property="Foreground" Value="Black"/>
			</Trigger>
			<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
				<Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
				<Setter Property="Color" TargetName="shadow" Value="#71000000"/>
			</Trigger>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true"/>
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
			</MultiTrigger>
			<Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
				<Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
				<Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource BaseStyle}">
		<Setter Property="IsReadOnly" Value="True" />
		<Setter Property="IsEditable" Value="True" />
		<Setter Property="Margin" Value="5" />
		<Setter Property="BorderThickness" Value="0" />

		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
		<Setter Property="Background" Value="{StaticResource ComboBox.Static.Background}"/>
		<Setter Property="BorderBrush" Value="{StaticResource ComboBox.Static.Border}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
		<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>

		<Setter Property="ItemContainerStyle">
			<Setter.Value>
				<Style TargetType="ComboBoxItem">
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="ComboBoxItem">
								<Border Name="Back" Background="Transparent" BorderThickness="0" BorderBrush="#81D779" >
									<ContentPresenter ContentSource="{Binding Source}" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="5,0,0,0">
										
										<ContentPresenter.Resources>
											<Style TargetType="TextBlock">
												<Setter Property="FontSize" Value="{StaticResource FontSizeLarge}" />
												<Setter Property="FontFamily" Value="{StaticResource LatoRegular}" />
											</Style>
										</ContentPresenter.Resources>
										
									</ContentPresenter>
								</Border>
								<ControlTemplate.Triggers>
									<Trigger Property="IsMouseOver" Value="True">
										<Setter TargetName="Back" Property="Background" Value="LightGray"></Setter>
									</Trigger>
									<Trigger Property="IsHighlighted" Value="True">
										<Setter TargetName="Back" Property="Background" Value="LightGray"></Setter>
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>

		<Setter Property="local:TextValidationProperty.Value">
			<Setter.Value>
				<Binding Path="SelectedItem" RelativeSource="{RelativeSource Self}"  UpdateSourceTrigger="PropertyChanged">
					<Binding.ValidationRules>
						<local:NotNullOrEmptyValidationRule ValidatesOnTargetUpdated="True" />
					</Binding.ValidationRules>
				</Binding>
			</Setter.Value>
		</Setter>

		<Style.Triggers>
			<Trigger Property="IsEditable" Value="true">
				<Setter Property="IsTabStop" Value="false"/>
				<Setter Property="Padding" Value="2"/>
				<Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
			</Trigger>
		</Style.Triggers>
	</Style>
	
	<SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF"/>
	<SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070"/>
	<SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#FFF3F9FF"/>
	<SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#FF5593FF"/>
	<SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF212121"/>
	<SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6"/>
	<SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC"/>
	<SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070"/>
	<SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FFD9ECFF"/>
	<SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF3C77DD"/>
	<SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF212121"/>
	<SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF212121"/>

	<Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource BaseStyle}">
		<Setter Property="FontFamily" Value="{StaticResource LatoRegular}" />
		<Setter Property="FontSize" Value="{StaticResource FontSizeLarge}" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="Margin" Value="5 0" />

		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
		<Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}"/>
		<Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
							<Grid x:Name="markGrid">
								<Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="{StaticResource OptionMark.Static.Glyph}" Margin="1" Opacity="0" Stretch="None"/>
								<Rectangle x:Name="indeterminateMark" Fill="{StaticResource OptionMark.Static.Glyph}" Margin="2" Opacity="0"/>
							</Grid>
						</Border>
						<ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="HasContent" Value="true">
							<Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
							<Setter Property="Padding" Value="4,-1,0,0"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Background}"/>
							<Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Border}"/>
							<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
							<Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Background}"/>
							<Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Border}"/>
							<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
							<Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Background}"/>
							<Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Border}"/>
							<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
							<Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter Property="Opacity" TargetName="optionMark" Value="1"/>
							<Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
						</Trigger>
						<Trigger Property="IsChecked" Value="{x:Null}">
							<Setter Property="Opacity" TargetName="optionMark" Value="0"/>
							<Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>