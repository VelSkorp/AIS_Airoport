<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:local="clr-namespace:AIS_Airport">

	<ResourceDictionary.MergedDictionaries>
		<!-- Order is important -->
		<ResourceDictionary Source="Colors.xaml" />
		<ResourceDictionary Source="Fonts.xaml" />
		<ResourceDictionary Source="Texts.xaml" />
	</ResourceDictionary.MergedDictionaries>

	<!-- Hoverless button -->
	<Style TargetType="{x:Type Button}" x:Key="Hoverless">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
						<ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- System Icon Button -->
	<Style TargetType="{x:Type Button}" x:Key="SystemIconButton" BasedOn="{StaticResource Hoverless}">

		<Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
		<Setter Property="Margin" Value="10" />

	</Style>

	<!-- Window Control Button -->
	<Style TargetType="{x:Type Button}" x:Key="WindowControlButton" BasedOn="{StaticResource BaseStyle}">
		<Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Padding" Value="8" />
		<Setter Property="VerticalAlignment" Value="Stretch" />
		<Setter Property="Foreground" Value="{StaticResource ForegroundMainBrush}" />

		<Setter Property="LayoutTransform">
			<Setter.Value>
				<ScaleTransform ScaleX="1.5" />
			</Setter.Value>
		</Setter>

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
						<TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Text="{TemplateBinding Content}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{StaticResource BackgroundLightBrush}" />
			</Trigger>
		</Style.Triggers>

	</Style>

	<!-- Window Close Button -->
	<Style TargetType="{x:Type Button}" x:Key="WindowCloseButton" BasedOn="{StaticResource WindowControlButton}">

		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="Red" />
				<Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}" />
			</Trigger>
		</Style.Triggers>

	</Style>

	<!-- Icon and Text Button -->
	<Style TargetType="{x:Type Button}" x:Key="IconAndTextButton"  BasedOn="{StaticResource BaseStyle}">

		<Setter Property="Background" Value="{StaticResource WordOrangeBrush}" />
		<Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="FontSize" Value="{StaticResource FontSizeLarge}" />
		<Setter Property="FontFamily" Value="{StaticResource LatoRegular}" />
		<Setter Property="Padding" Value="50 10" />
		<Setter Property="Margin" Value="0 15" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Border x:Name="border"
							CornerRadius="10"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}" 
							SnapsToDevicePixels="True">
						<StackPanel Orientation="Horizontal">
							
							<Image Source="{TemplateBinding Tag}" 
								   VerticalAlignment="Top"
								   HorizontalAlignment="Center"
								   Margin="10"                                    
								   Height="50" />

							<TextBlock Text="{TemplateBinding Content}"
										Focusable="False" 
										FontFamily="{TemplateBinding FontFamily}"
										FontSize="{TemplateBinding FontSize}"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
										Margin="{TemplateBinding Padding}" 
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

						</StackPanel>
					</Border>
					<ControlTemplate.Triggers>
						<EventTrigger RoutedEvent="MouseEnter">
							<BeginStoryboard>
								<Storyboard>
									<ColorAnimation To="{StaticResource WordGreen}" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" />
								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
						<EventTrigger RoutedEvent="MouseLeave">
							<BeginStoryboard>
								<Storyboard>
									<ColorAnimation From="{StaticResource WordGreen}" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" />
								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Background" TargetName="border" Value="{StaticResource ForegroundDarkBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Regular Button -->
	<Style TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">

		<Setter Property="Background" Value="{StaticResource WordOrangeBrush}" />
		<Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="FontSize" Value="{StaticResource FontSizeXXLarge}" />
		<Setter Property="FontFamily" Value="{StaticResource LatoRegular}" />
		<Setter Property="Padding" Value="40 10" />
		<Setter Property="Margin" Value="10" />

		<Setter Property="local:IsBusyProperty.Value" Value="False" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Border x:Name="border"
							CornerRadius="10"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}" 
							SnapsToDevicePixels="True">
						<Grid>
							<TextBlock Text="{TemplateBinding Content}" 
								   Visibility="{TemplateBinding local:IsBusyProperty.Value, Converter={local:BooleanToVisibilityConverter}}"
								   Focusable="False" 
								   FontFamily="{TemplateBinding FontFamily}"
								   FontSize="{TemplateBinding FontSize}"
								   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
								   Margin="{TemplateBinding Padding}" 
								   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
								   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

							<TextBlock Style="{StaticResource SpinningText}" 
								   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
								   FontSize="{TemplateBinding FontSize}"
								   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								   Visibility="{TemplateBinding local:IsBusyProperty.Value, Converter={local:BooleanToVisibilityConverter}, ConverterParameter=True}"
								   />

						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<EventTrigger RoutedEvent="MouseEnter">
							<BeginStoryboard>
								<Storyboard>
									<ColorAnimation To="{StaticResource WordGreen}" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" />
								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
						<EventTrigger RoutedEvent="MouseLeave">
							<BeginStoryboard>
								<Storyboard>
									<ColorAnimation From="{StaticResource WordGreen}" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" />
								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Background" TargetName="border" Value="{StaticResource ForegroundDarkBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Text button -->
	<Style x:Key="TextButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">

		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="FontSize" Value="{StaticResource FontSizeLarge}" />
		<Setter Property="FontFamily" Value="{StaticResource LatoRegular}" />
		<Setter Property="Padding" Value="50 10" />
		<Setter Property="Margin" Value="0 10" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Border x:Name="border"
							CornerRadius="10"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}" 
							SnapsToDevicePixels="True">
						<TextBlock Text="{TemplateBinding Content}" 
								   Focusable="False" 
								   FontFamily="{TemplateBinding FontFamily}"
								   FontSize="{TemplateBinding FontSize}"
								   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
								   Margin="{TemplateBinding Padding}" 
								   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
								   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Foreground" Value="{StaticResource WordOrangeBrush}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{StaticResource ForegroundDarkBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Icon button -->
	<Style x:Key="IconButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">

		<Setter Property="Background" Value="{StaticResource WordTransparentBlueBrush}" />
		<Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="FontSize" Value="{StaticResource FontSizeXXLarge}" />
		<Setter Property="FontFamily" Value="{StaticResource FontAwesome}" />
		<Setter Property="Padding" Value="30" />
		<Setter Property="Margin" Value="0" />

		<Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Border x:Name="border"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}" 
							SnapsToDevicePixels="True">
						<Grid>
							<Viewbox>
								<TextBlock Text="{TemplateBinding Content}" 
									   Focusable="False" 
									   FontFamily="{TemplateBinding FontFamily}"
									   FontSize="{TemplateBinding FontSize}"
									   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
									   Margin="{TemplateBinding Padding}" 
									   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
									   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							</Viewbox>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<EventTrigger RoutedEvent="MouseEnter">
							<BeginStoryboard>
								<Storyboard>
									<ColorAnimation To="{StaticResource WordLightBlue}" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" />
								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
						<EventTrigger RoutedEvent="MouseLeave">
							<BeginStoryboard>
								<Storyboard>
									<ColorAnimation To="{StaticResource WordTransparentBlue}" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" />
								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Background" TargetName="border" Value="{StaticResource ForegroundDarkBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--IconGrow Button  -->
	<Style x:Key="IconGrowButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">

		<Setter Property="Background" Value="{StaticResource WordTransparentBlueBrush}" />
		<Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="FontSize" Value="{StaticResource FontSizeXXLarge}" />
		<Setter Property="FontFamily" Value="{StaticResource FontAwesome}" />
		<Setter Property="Padding" Value="30" />
		<Setter Property="Margin" Value="0" />

		<Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Border x:Name="border"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}" 
							SnapsToDevicePixels="True">

						<!-- Add the render scale transform -->
						<Border.RenderTransform>
							<ScaleTransform />
						</Border.RenderTransform>
						<Border.RenderTransformOrigin>
							<Point X="0.5" Y="0.5" />
						</Border.RenderTransformOrigin>

						<Grid>
							<Viewbox>
								<TextBlock Text="{TemplateBinding Content}" 
									   Focusable="False" 
									   FontFamily="{TemplateBinding FontFamily}"
									   FontSize="{TemplateBinding FontSize}"
									   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
									   Margin="{TemplateBinding Padding}" 
									   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
									   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							</Viewbox>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<EventTrigger RoutedEvent="MouseEnter">
							<BeginStoryboard>
								<Storyboard>
									<DoubleAnimation To="1.4" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
									<DoubleAnimation To="1.4" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
						<EventTrigger RoutedEvent="MouseLeave">
							<BeginStoryboard>
								<Storyboard>
									<DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
									<DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Background" TargetName="border" Value="{StaticResource ForegroundDarkBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

	</Style>

	<Style x:Key="FocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<SolidColorBrush x:Key="RadioButton.Static.Background" Color="#FFFFFFFF"/>
	<SolidColorBrush x:Key="RadioButton.Static.Border" Color="#FF707070"/>
	<Style x:Key="OptionMarkFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<SolidColorBrush x:Key="RadioButton.MouseOver.Background" Color="#FFF3F9FF"/>
	<SolidColorBrush x:Key="RadioButton.MouseOver.Border" Color="#FF5593FF"/>
	<SolidColorBrush x:Key="RadioButton.MouseOver.Glyph" Color="#FF212121"/>
	<SolidColorBrush x:Key="RadioButton.Disabled.Background" Color="#FFE6E6E6"/>
	<SolidColorBrush x:Key="RadioButton.Disabled.Border" Color="#FFBCBCBC"/>
	<SolidColorBrush x:Key="RadioButton.Disabled.Glyph" Color="#FF707070"/>
	<SolidColorBrush x:Key="RadioButton.Pressed.Background" Color="#FFD9ECFF"/>
	<SolidColorBrush x:Key="RadioButton.Pressed.Border" Color="#FF3C77DD"/>
	<SolidColorBrush x:Key="RadioButton.Pressed.Glyph" Color="#FF212121"/>
	<SolidColorBrush x:Key="RadioButton.Static.Glyph" Color="#FF212121"/>
	<Style TargetType="{x:Type RadioButton}">
		<Setter Property="Margin" Value="0 0 10 0" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
		<Setter Property="Background" Value="{StaticResource RadioButton.Static.Background}"/>
		<Setter Property="BorderBrush" Value="{StaticResource RadioButton.Static.Border}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">
					<Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>

						<Border x:Name="radioButtonBorder" 
								BorderBrush="{TemplateBinding BorderBrush}" 
								BorderThickness="{TemplateBinding BorderThickness}" 
								Background="{TemplateBinding Background}"
								CornerRadius="100" 
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								Margin="5,5,0,0"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}">

							<Grid x:Name="markGrid" Margin="2">
								<Ellipse x:Name="optionMark" Fill="{StaticResource RadioButton.Static.Glyph}" MinWidth="6" MinHeight="6" Opacity="0"/>
							</Grid>

						</Border>

						<ContentPresenter x:Name="contentPresenter"
										  Grid.Column="1" 
										  Focusable="False"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  Margin="{TemplateBinding Padding}"
										  RecognizesAccessKey="True"
										  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">

							<ContentPresenter.Resources>
								<Style TargetType="TextBlock">
									<Setter Property="FontSize" Value="{StaticResource FontSizeLarge}" />
									<Setter Property="FontFamily" Value="{StaticResource LatoRegular}" />
								</Style>
							</ContentPresenter.Resources>

						</ContentPresenter>

					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="HasContent" Value="true">
							<Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
							<Setter Property="Padding" Value="4,-1,0,0"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.MouseOver.Background}"/>
							<Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.MouseOver.Border}"/>
							<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.MouseOver.Glyph}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Disabled.Background}"/>
							<Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Disabled.Border}"/>
							<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Disabled.Glyph}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Pressed.Background}"/>
							<Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Pressed.Border}"/>
							<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Pressed.Glyph}"/>
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter Property="Opacity" TargetName="optionMark" Value="1"/>
						</Trigger>
						<Trigger Property="IsChecked" Value="{x:Null}">
							<Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<LinearGradientBrush x:Key="TabItem.Static.Background" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#F0F0F0" Offset="0.0"/>
		<GradientStop Color="#E5E5E5" Offset="1.0"/>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="TabItem.Static.Border" Color="#ACACAC"/>
	<LinearGradientBrush x:Key="TabItem.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#ECF4FC" Offset="0.0"/>
		<GradientStop Color="#DCECFC" Offset="1.0"/>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="TabItem.MouseOver.Border" Color="#7EB4EA"/>
	<SolidColorBrush x:Key="TabItem.Disabled.Background" Color="#F0F0F0"/>
	<SolidColorBrush x:Key="TabItem.Disabled.Border" Color="#D9D9D9"/>
	<SolidColorBrush x:Key="TabItem.Selected.Border" Color="{StaticResource ForegroundVeryDark}"/>
	<SolidColorBrush x:Key="TabItem.Selected.Background" Color="{StaticResource BackgroundVeryLight}"/>
	
	<Style TargetType="{x:Type TabItem}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
		<Setter Property="Foreground" Value="{StaticResource ForegroundVeryDarkBrush}"/>
		<Setter Property="Background" Value="{StaticResource TabItem.Static.Background}"/>
		<Setter Property="BorderBrush" Value="{StaticResource TabItem.Static.Border}"/>
		<Setter Property="Margin" Value="0"/>
		<Setter Property="Padding" Value="6 2 6 2"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Stretch"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Grid x:Name="templateRoot"
						  SnapsToDevicePixels="true">
						
						<Border x:Name="mainBorder"
								CornerRadius="5 5 0 0"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="1,1,1,0" 
								Background="{TemplateBinding Background}"
								Margin="0">
							
							<Border x:Name="innerBorder"
									BorderBrush="{StaticResource TabItem.Selected.Border}"
									BorderThickness="1,1,1,0"
									Background="{StaticResource TabItem.Selected.Background}"
									Margin="-1"
									Opacity="0"/>
						
						</Border>

						<ContentPresenter x:Name="contentPresenter" 
										  ContentSource="Header" 
										  Focusable="False"
										  HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
										  Margin="{TemplateBinding Padding}"
										  RecognizesAccessKey="True" 
										  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										  VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}">

							<ContentPresenter.Resources>
								<Style TargetType="TextBlock">
									<Setter Property="FontSize" Value="{StaticResource FontSizeLarge}" />
									<Setter Property="FontFamily" Value="{StaticResource LatoRegular}" />
								</Style>
							</ContentPresenter.Resources>

						</ContentPresenter>
					</Grid>

					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
							<Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
							<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
							<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
							<Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
							<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
							<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
							<Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
							<Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
							<Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
							<Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
							<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
							<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
							<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
							<Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
							<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
							<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
							<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
							<Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
							<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
							<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
							<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
							<Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
							<Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
							<Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
							<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
							<Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
							<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
							<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
							<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Panel.ZIndex" Value="1"/>
							<Setter Property="Margin" Value="-2,-2,0,-2"/>
							<Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
							<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
							<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
							<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Panel.ZIndex" Value="1"/>
							<Setter Property="Margin" Value="-2,0,-2,-2"/>
							<Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
							<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
							<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
							<Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Panel.ZIndex" Value="1"/>
							<Setter Property="Margin" Value="0,-2,-2,-2"/>
							<Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
							<Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
							<Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
							<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
								<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Panel.ZIndex" Value="1"/>
							<Setter Property="Margin" Value="-2,-2,-2,0"/>
							<Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
							<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
							<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
						</MultiDataTrigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type TabControl}">
		<Setter Property="Padding" Value="5 0 5 5"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Background" Value="{StaticResource TabItem.Selected.Background}"/>
		<Setter Property="BorderBrush" Value="{StaticResource TabItem.Selected.Border}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabControl}">

					<Grid x:Name="templateRoot"
						  ClipToBounds="true"
						  SnapsToDevicePixels="true" 
						  KeyboardNavigation.TabNavigation="Local">

						<Grid.ColumnDefinitions>
							<ColumnDefinition x:Name="ColumnDefinition0"/>
							<ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition x:Name="RowDefinition0" Height="Auto"/>
							<RowDefinition x:Name="RowDefinition1" Height="*"/>
						</Grid.RowDefinitions>

						<TabPanel x:Name="headerPanel"
								  Background="Transparent" 
								  IsItemsHost="true"
								  Margin="7 5 5 0"
								  KeyboardNavigation.TabIndex="1" 
								  Panel.ZIndex="1"/>

						<Border x:Name="contentPanel"
								BorderBrush="{TemplateBinding BorderBrush}" 
								BorderThickness="{TemplateBinding BorderThickness}" 
								Background="{TemplateBinding Background}"
								KeyboardNavigation.DirectionalNavigation="Contained"
								Grid.Row="1"
								CornerRadius="0 10 10 10"
								Margin="{TemplateBinding Padding}"
								KeyboardNavigation.TabIndex="2"
								KeyboardNavigation.TabNavigation="Local">

							<ContentPresenter x:Name="PART_SelectedContentHost"
											  ContentSource="SelectedContent"
											  Margin="{TemplateBinding Padding}"
											  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

						</Border>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="TabStripPlacement" Value="Bottom">
							<Setter Property="Grid.Row" TargetName="headerPanel" Value="1"/>
							<Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
							<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
							<Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
							<Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2"/>
						</Trigger>
						<Trigger Property="TabStripPlacement" Value="Left">
							<Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
							<Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
							<Setter Property="Grid.Column" TargetName="headerPanel" Value="0"/>
							<Setter Property="Grid.Column" TargetName="contentPanel" Value="1"/>
							<Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
							<Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
							<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
							<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
							<Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2"/>
						</Trigger>
						<Trigger Property="TabStripPlacement" Value="Right">
							<Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
							<Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
							<Setter Property="Grid.Column" TargetName="headerPanel" Value="1"/>
							<Setter Property="Grid.Column" TargetName="contentPanel" Value="0"/>
							<Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
							<Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
							<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
							<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
							<Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>